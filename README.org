#+title: Emacs Workspace: IDE + Yet Another Jupyter
#+options: \n:t
#+latex_header: \usepackage{common}
#+latex_header_extra: \usepackage{page}
#+latex_class: ox-latex-scrarticle


#+begin_abstract
(/You are recommended to read this blog [[https://ochicken.net/projects/workspace/][here]] or read it on your Emacs/)
(This article is not intended for Emacs beginners, but for those who have coded in Emacs for some months)

This blog is my configuration of Emacs as a personal workspace, includes:
- *A mini-IDE for programming;*
- *Use Org mode to preview LaTeX TikZ pictures;*
- *Use Org mode Babel, like what you do in Jupyter.*
#+end_abstract

* Before You Start (CN+EN)
:PROPERTIES:
:CUSTOM_ID: before-you-start
:END:

*/You are recommended to read this blog [[https://ochicken.net/projects/workspace/][here]], or download from the [[https://github.com/OChicken/Workspace][repo]] then read on your Emacs locally./*

/This article is *not intended for Emacs beginners*, but for those who have coded in Emacs for some months./

** What You DON'T Need And What You Need

Many people shared how they use Emacs as an OS. My goal is really humble in comparison. I DON'T require Emacs to
- Browsing the web --- Emacs's EWW can indeed do this, but I have never use it to browsing the web;
- Reading E-Mail --- Gmail works fine (I have configured Gnus, but don't want to share it for privacy reason);
- Reading PDF --- Emacs's built-in PDF reader *doesn't support continuous scrolling*, and cannot take notes;
- Translation and Grammarly --- Use browser;
- Listening to Music --- Use VLC;
- ...
In principle, all of these requests can be satisfied in modern browsers and GUI applications. If, according to some cynical persons, that "text browsers are orthodox and all other GUI browsers are heretical", then *reading PDF violates their own credo*.

However, if anyone can implement these features, I'd really appreciate it:
- editing files & run tests in console (which is what an IDE should look like).
- Yet another Jupyter, in Emacs
  - Execute code block by block;
  - Render/preview results in LaTeX.
- Org mode to export blogs
  - Not rely on Hexo or Hugo;
  - Looks like [[https://hexo.io/][Hexo]]'s [[https://theme-next.js.org/][NexT.Pisces]].
  - Sidebar TOC.
Math and science students are very attached to the block-by-block execution feature of Jupyter and Mathematica. [[https://mahmoodsheikh36.github.io/][Mahmood Sheikh]] made it possible to use Emacs Org mode as Jupyter. This article is inspired by that.

有不少人分享出自己如何[[https://tieba.baidu.com/p/1402662061?pn=1][把 Emacs 当作 OS 来用]]. 我的目标相比之下就很卑微, 我真的 *不需要* 用 Emacs 来
- 浏览网页 --- Emacs 的确也可以, 但我从不使用它来浏览网页;
- 阅读邮件 --- Gmail 本身就很好用 (其实我也配了 Gnus, 但隐私起见不便分享);
- 阅读 PDF --- Emacs 自带的 PDF 阅读器 *不支持 continuous scrolling*, 也不能在上面做笔记;
- 翻译 --- 用浏览器就好了;
- 听歌 --- 怼码时间怼码, 听歌时间听歌, alright?
- ...
原则上讲, 这些功能都可以在现代浏览器以及 GUI 应用程序上使用. 如果按某些人的话讲, 用 text browser 才是正统, 其他 GUI browser 都是异端, 那么他们 *阅读 pdf 也是违背了自己的信条的*.

但是如果有谁能实现这些功能, 那我真的会谢:
- 编辑文件 & console 运行测试 (也就是一个 IDE 应有的模样);
- 像 Jupyter 那样使用 Emacs
  - 逐块执行代码
  - 用 LaTeX 渲染出结果
- Org mode 导出博客
  - 不借助 Hexo 和 Hugo;
  - 长得像 [[https://hexo.io/][Hexo]] 的 [[https://theme-next.js.org/][NexT.Pisces]];
  - 侧边 TOC.
数理系学生对 Jupyter 和 Mathematica 的逐块执行的功能有很大粘性. [[https://mahmoodsheikh36.github.io/][Mahmood Sheikh]] 做到了把 Emacs Org mode 当 Jupyter 来用. 受此启发, 就有了本文.


** Refs

Use Emacs as an *IDE*:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Maintaining.html][29 Maintaining (GNU Emacs Manual)]]
- [[https://tuhdo.github.io/c-ide.html][C/C++ Development Environment for Emacs]]
- [[https://www.reddit.com/r/emacs/comments/dlf0w7/whats_your_setup_for_cc_in_emacs/][What's your setup for C/C++ in emacs ? : emacs]]
- [[https://github.com/junahan/junahan-emacs/blob/master/docs/cpp-ide.org][GitHub - junahan/junahan-emacs: Emacs config for c/c++]]

Use Emacs as *yet another Jupyter*:
- Mahmood Sheikh: [[https://www.reddit.com/r/emacs/comments/ufcvfl/the_real_reason_emacs_is_superior_orglatexsagemath/][the real reason emacs is superior - org+latex+sagemath : r/emacs]] 👍
- Mahmood Sheikh's repo: [[https://github.com/mahmoodsheikh36/dotfiles/][mahmoodsheikh36/dotfiles: my config files for various programs like emacs]]
- [[https://www.youtube.com/watch?v=WuRPOPocEXY&t=38s][怎样用 Emacs 做所有事 - YouTube]]


** My Preference on KBD

As you can read from many other blogs, the author's editor's usage history affects her/his Emacs config preference, especially the key-binding. For example, if the person has used Vim previously, it's very likely that she/he will use evil, the plugin that uses the Vim's kbd in Emacs. I used Sublime Text before, and *don't have history baggage on Vim*, so I *don't use evil, ivy, helm* etc other popular plugins (I think they dirty the native configurations and increase unnecessary complications).

I customized shortcuts in =init-kbd.el=, s.t. operations like *single line scroll*, *compile* etc can *done with left hand*. Here are some of them:
- =C-z= & =M-z= are bounded to /one-line scroll/ down/up. They were previously bounded to =suspend-frame= (nothing but minimize to system icon) & =zap-to-char=, both were barely used, so I make full use of them.
- =C-x C-v= & =C-x M-v= are bounded to /*half* screen scroll/ down/up.
- =C-v= is bounded to yank, because /*full* screen scroll/ (i.e. Page Down/Up) was barely used.
- =M-q= is bounded to =previous-command= in the Minibuffer mode. This command was bounded to =M-p= and you have to use right hand. Bounding to =M-q= can free your right hand.
- =M-e= is bounded to =<return>=. =M-e= was previously bounded to =forward-sentence=, barely used. So that you can do "Enter" by left hand.
- =C-<tab>= & =C-S-<tab>= are bounded to =next/previous-window=, so that you don't need =C-x o= to do so (=o= uses right hand).

读过不少博客就会发现, 作者的编辑器使用历史会影响此人在配置 Emacs 时的偏好, 特别是 key-binding. 譬如说, 如果此人之前用 Vim, 那么大概率会采用 evil 这款在 Emacs 里使用 Vim 键位的插件. 我之前用 Sublime Text, *没有 Vim 的历史包袱*, 所以配置里 *没有使用 evil, ivy, helm* 等流行插件 (总觉得太庞大的插件污染了原生键位增加复杂性).

在 =init-kbd.el= 里我自定义了一些快捷键, 使得如 *单行滚动浏览* 以及 *编译* 等操作都可以 *用左手来完成*. 这里提及部分:
- 单行下滚绑定了 =C-z=, 上滚绑定了 =M-z.= 二者原来分别绑定的是 =suspend-frame= 和 =zap-to-char=, 前者实际上就是最小化到系统图标的意思, 都极不常用, 不用白不用;
- =C-x C-v= 绑定了半屏下滚, =C-x M-v= 绑定了半屏上滚. 半屏滚是用自己写的函数.
- 因为整屏滚用得少 (也即方向键的 Page Down/Up), 所以就把 =C-v= 绑定到 yank.
- 在 Minibuffer 模式里把绑定 =M-q= 绑定为 =previous-command=. 这个命令原来是绑定了 =M-p=, 必须使用右手, 而绑定 =M-q= 的话就可以用左手完成.
- 绑定 =M-e= 为 =<return>=. 它原来绑定的是 =forward-sentence=, 极不常用. 这样也可以用左手敲回车.
- =C-<tab>= 和 =C-S-<tab>= 分别绑定为 =next/previous-window=, 这样就可以不使用 =C-x o= (你需要右手敲 =o=).


** Structure of the Repo

The code is available on this [[https://github.com/OChicken/Workspace][repo]].

*** Emacs & Org mode Config

Consists of the following. Read Chapter [[#ya-jupyter]] for detail.
#+begin_src txt
.
├── .emacs.d/
│   ├── ctags/
│   │   ├── TAGS
│   │   ├── TAGS-linux         /* large file */
│   │   └── TAGS-verilator
│   ├── init.el
│   ├── lisp/
│   │   ├── init-edit.el
│   │   ├── init-gnus.el       /* private */
│   │   ├── init-kbd.el
│   │   ├── init-opt.el        /* private */
│   │   ├── init-org.el
│   │   ├── init-package.el
│   │   ├── init-progmodes.el
│   │   ├── init-sessions.el
│   │   ├── init-utils.el
│   │   └── init-view.el
│   └── snippets/
│       └── org-mode/
│           ├── ditaa
│           ├── latex-drawer
│           ├── latex-graphics
│           ├── properties
│           ├── sage
│           └── shell
├── .sage/                     /* SageMath config, enpower your Org-mode */
│   └── init.sage
└── texmf/                     /* LaTeX    config, enpower your Org-mode */
    └── tex/
        └── latex/
            ├── common.sty
            └── page.sty
#+end_src


*** Blog config

Consists of the following. Read Chapter [[#export-blog]] for detail (or [[https://ochicken.net/projects/server/][this]] in CN).
#+begin_src txt
.
├── blog.el                    /* script to generate html and deploy */
├── Makefile                   /* make g, make s, make d */
├── README.org                 /* It's index.html */
└── static
    ├── Cola.png
    ├── font-awesome/
    │   ├── css/
    │   │   └── all.min.css
    │   └── webfonts/
    │       ├── fa-brands-400.woff2
    │       ├── fa-regular-400.woff2
    │       └── fa-solid-900.woff2
    ├── head.html              /* layout */
    ├── preamble.html          /* layout */
    ├── postamble.html         /* layout */
    └── main.css               /* css    */
#+end_src


*** Sample Projects of Mini-IDE

Instead of focusing on the contents of =.emacs.d= (like many articles talking about), I would like to tell you more about the project's dir. This is because each project dir have their own structure, and it is unwise to write the global configuration in =.emacs.d=.

There are 4 sample projects. =mini-ide/= & =eglot-clangd/= & =eglot-ccls/= have almost the same structure, while =ede/= has slightly more (it is a minimum GNU make project).
#+begin_src txt
.
├── mini-ide/ or eglot-clangd/ or eglot-ccls/
│   ├── build/
│   │   ├── config.h
│   │   └── Makefile
│   ├── compile_commands.json  /* exists in eglot-clangd */
│   ├── .dir-locals.el
│   ├── include/
│   │   └── myproj.h
│   ├── Makefile
│   ├── src/
│   │   ├── mylib.c
│   │   └── Makefile
│   └── tests/
│       ├── main.c
│       └── Makefile
└── ede/                       /* a GNU make project */
    ├── AUTHORS
    ├── ChangeLog
    ├── configure.ac           /* important */
    ├── .dir-locals.el
    ├── include/
    │   └── myproj.h
    ├── make-clean.sh          /* just a script to reset the content back to the state before build */
    ├── Makefile.am
    ├── NEWS
    ├── README
    ├── src/
    │   ├── mylib.c
    │   └── Makefile.am
    └── tests/
        ├── main.c
        └── Makefile.am
#+end_src


** Recap: C-h to Fetch Info

Use =C-h v= to see a variable. Execute the following command to reset it.
#+begin_src emacs-lisp
(setq foo (eval (car (get 'foo 'standard-value))))
#+end_src
where the "execute" means, place the cursor at the end of the emacs-lisp's sexp, then =C-x C-e=.

Use =C-h c= or =C-h k= to see the information of a key bindings.


* Org Mode: Yet Another Jupyter Lab
:PROPERTIES:
:CUSTOM_ID: ya-jupyter
:END:

You can use Org mode just like using Jupyter Lab. *Open me ([[https://github.com/OChicken/Workspace][README.org]]) in Emacs* to see how powerful it is.

[[file:demo/Org.png]]

#+begin_export html
<iframe width=800 height=430
  src="demo/Org.mp4" frameborder="0">
</iframe>
#+end_export

If you are currently viewing [[https://github.com/OChicken/Workspace][README.org]] in your Emacs, you would notice that there are many options after the heading of each src-block. It's very tricky to set them, and the examples provided in this chapter are my daily-used settings. Click [[https://orgmode.org/manual/Results-of-Evaluation.html][Sec 16.6]] to read the details.

[[https://orgmode.org/manual/Working-with-Source-Code.html][16 Working with Source Code (The Org Manual)]]
- [[https://orgmode.org/manual/Using-Header-Arguments.html][16.3 Using Header Arguments (The Org Manual)]]
- [[https://orgmode.org/manual/Environment-of-a-Code-Block.html][16.4 Environment of a Code Block (The Org Manual)]]
- [[https://orgmode.org/manual/Results-of-Evaluation.html][16.6 Results of Evaluation (The Org Manual)]]
- [[https://orgmode.org/manual/Exporting-Code-Blocks.html][16.7 Exporting Code Blocks (The Org Manual)]]
[[https://necromuralist.github.io/posts/org-babel-cheat-sheet/][Org-Babel Cheat Sheet | The Cloistered Monkey]]

** Org mode + LaTeX

TikZ drawing is the most suitable example to illustrate how powerful it is. Example comes from [[https://www.overleaf.com/learn/latex/TikZ_package][Overleaf]].

#+begin_src latex :results drawer
\begin{tikzpicture}
\draw[blue, very thick] (0,0) rectangle (3,2);
\draw[orange, ultra thick] (4,0) -- (6,0) -- (5.7,2) -- cycle;
\end{tikzpicture}
#+end_src

#+RESULTS:
:results:
\begin{tikzpicture}
\draw[blue, very thick] (0,0) rectangle (3,2);
\draw[orange, ultra thick] (4,0) -- (6,0) -- (5.7,2) -- cycle;
\end{tikzpicture}
:end:


** Org mode + Babel

Use =C-c C-x C-v= to toggle image show.

*** C

#+begin_src C :flags "-Wall -O2" :libs "-lgcrypt -lm" :results verbatim
#include <stdio.h>
#include <math.h>
#include <gcrypt.h>
typedef struct gcry_mpi *MPI;
void show_mpi (MPI a)
{
	gcry_error_t err = GPG_ERR_NO_ERROR;
	gcry_sexp_t data;
	char *buf;
	size_t size;
	err = gcry_sexp_build(&data, NULL, "%m", a);
	if (err)
		fprintf(stderr, "Error in %s.", __func__);
	size = gcry_sexp_sprint (data, GCRYSEXP_FMT_ADVANCED, NULL, 0);
	buf = (char *)malloc (size);
	gcry_sexp_sprint (data, GCRYSEXP_FMT_ADVANCED, buf, size);
	fflush(stdout);
	//fprintf (stderr, "%s", buf);
	printf("%s", buf);
	free (buf);
	gcry_sexp_release(data);
}

int my_lib_function() {
	MPI GPQHE_TWO;
	GPQHE_TWO = mpi_new(0);
	mpi_set_ui(GPQHE_TWO, 2);
	show_mpi(GPQHE_TWO);
	mpi_release(GPQHE_TWO);
	return 0;
}

int main()
{
	printf("%f\n", sin(1));
	printf("Hello OChicken!\n");
	printf("Hello World, I am OChicken!\n");
	my_lib_function();
	return 0;
}
#+end_src

#+RESULTS:
: 0.841471
: Hello OChicken!
: Hello World, I am OChicken!
: #02#


*** Python

#+begin_src python :results file link
import numpy as np
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=np.linspace(-15,15)
plt.plot(np.sin(x)/x)
fig.tight_layout()
plt.savefig("/tmp/python.png")
return "/tmp/python.png"
#+end_src

#+RESULTS:
[[file:/tmp/python.png]]


*** SageMath

#+begin_src sage :session t :results drawer
m = random_matrix(ZZ, 3, 3)
latexp(m)                      # This function is defined in .sage/init.sage
#+end_src

#+RESULTS:
:results:
\[ \left(\begin{array}{rrr}
0 & 3 & 3 \\
1 & 2 & -1 \\
1 & 0 & -1
\end{array}\right) \]
:end:


*** Gnuplot

#+begin_src gnuplot :file /tmp/gnuplot.png
set title "Some Math Functions"
set xrange [-10:10]
set yrange [-2:2]
set zeroaxis
plot (x/4)**2, sin(x), 1/x
#+end_src

#+RESULTS:
[[file:/tmp/gnuplot.png]]


* Org Mode: Export Blog
:PROPERTIES:
:CUSTOM_ID: export-blog
:END:

As you can see in the footer, this blog is generated by *Emacs Org mode*. The theme is pretty similar to [[https://hexo.io/][Hexo]]'s [[https://theme-next.js.org/][NexT.Pisces]], but it is generated neither by [[https://hexo.io/][Hexo]] nor [[https://gohugo.io/][Hugo]]. The following video shows how the blog page is locally built. This chapter is available in CN, read [[https://ochicken.net/projects/server/][this]].

#+begin_export html
<iframe width=800 height=430
  src="demo/publish-blog.mp4" frameborder="0">
</iframe>
#+end_export

** Introduction

*** My Preference

I use [[https://hexo.io/][Hexo]] previously for many years. Its workflow is simple: write md files in your editor, =hexo g= to generate html files, =hexo s= to locally preview in =http://localhost:4000/=, and =hexo d= to deploy to VPS. Its [[https://theme-next.js.org/][NexT.Pisces]] theme is wonderful. Besides this theme are many other choices on its official side. This fact worth a paragraph to praise 👍

However, [[https://hexo.io/][Hexo]] doesn't have a nice support on Org-mode. Nevertheless, there is a plugin [[https://github.com/coldnew/hexo-renderer-org][hexo-renderer-org]], but its currently no longer support. Due to this drawback, many Emacser turn to [[https://gohugo.io/][Hugo]]. But [[https://gohugo.io/][Hugo]] doesn't have [[https://theme-next.js.org/][NexT.Pisces]].

Later I realized that, *CSS file contributes 90% of what makes a web page look nice*. [[https://hexo.io/][Hexo]] and [[https://gohugo.io/][Hugo]] are nothing but use a series of user-friendly interface to generate the desired CSS. When you are not sure which theme you like, you can use this way to try various themes; *after you determined /this/ theme and /this/ scheme, you can take the generated =main.css= and DIY on your own*, and finally add this line to the beginning of the Org file:

#+begin_src org
#+html_head: <link rel="stylesheet" type="text/css" href="path/to/main.css"/>
#+end_src


*** Your Choices of CSS

There are many choices of CSS files:
- [[https://stackoverflow.com/questions/70693619/how-to-use-display-table-of-contents-in-sidebar-with-arbitrary-html-file][css - How to use display Table of Contents in sidebar with arbitrary HTML file? - Stack Overflow]]
- [[https://github.com/fniessen/org-html-themes][Transform your Org mode files into stunning HTML documents]]: a [[https://docs.readthedocs.io/en/stable/][Read the Docs]]-like theme
- [[https://emacs.stackexchange.com/questions/62617/how-to-export-an-html-file-with-a-foldable-dynamic-toc-from-an-org-file][org mode - How to export an html file with a foldable & dynamic TOC from an org file? - Emacs Stack Exchange]] mentioned Worg 👍

You can start your first step by adding any one line from the following
#+begin_src org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/readtheorg.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="fniessen.github.io_org-html-themes_src_readtheorg_theme_css_readtheorg.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="https://orgmode.org/worg/style/worg.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="/path/to/worg.css"/>
#+end_src
[[https://olmon.gitlab.io/about-me][OlMon]] shared a series of CSS that used for Org files
- [[https://www.reddit.com/r/emacs/comments/lmz748/org_html_theme_collection/][Org HTML theme collection : emacs]] (also mentioned fniessen's =readtheorg=)
- [[https://olmon.gitlab.io/org-themes/][Org Themes collection]] 👍
- [[https://gitlab.com/OlMon/org-themes/][OlMon / org-themes · GitLab]]
- [[https://stackoverflow.com/questions/7467870/org-mode-html-export][emacs - org-mode html export - Stack Overflow]]
Dr. gongzhitao made his own
- [[https://gongzhitaao.org/orgcss/][CSS for Org-exported HTML]]


*** Before the Start

These two articles have a very easy demo to start:
- [[https://taingram.org/blog/org-mode-blog.html][Building a Emacs Org-Mode Blog]]
- [[https://www.shellcodes.org/Emacs/使用Org-Mode生成博客.html][使用 Org-Mode 生成博客]]
[[https://orgmode.org/worg/][Worg]]'s homepage provides a repo on how its website is build, but their project is very large, so personally I don't recommend it.

The CSS files I used to DIY are
1. The CSS generated by [[https://hexo.io/][Hexo]]'s [[https://theme-next.js.org/][NexT.Pisces]], located at =./public/css/main.css= (just love its color scheme, no other reasons)
2. [[https://orgmode.org/worg/][Worg]]'s official "[[https://orgmode.org/worg/style/worg.css][answer]]", where =worg/style/worg.css= can faithfully generate the foldable sidebar TOC.

The structure of my home dir is
#+begin_src txt
.
├── blog.el                    /* script to generate html and deploy */
├── Makefile                   /* make g, make s, make d */
├── index.org                  /* Exactly what you see in https://OChicken.net */
├── static/
│   ├── Cola.png
│   ├── font-awesome/
│   ├── head.html              /* layout */
│   ├── preamble.html          /* layout */
│   ├── postamble.html         /* layout */
│   └── main.css               /* css    */
└── projects/
    └── workspace
        ├── Danke.gif
        └── index.org
#+end_src


** Layout: header, preamble & postamble

The html file generated by Org mode is shown in the following. Replace the contents in =head.html,= =preamble.html= & =postamble.html= with yourself.
#+begin_src html -n
  <!-- head.html begins here (ends in line 7) -->
  <meta charset="UTF-8">
  <meta name="generator" content="Emacs 29.1, Org mode 9.6.6">
  <link rel="icon" type="image/png" href="/images/Cola.png">
  <link rel="stylesheet" href="/css/main.css">
  <link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">
  <!-- head.html ends here (begins in line 1) -->
  <body>                                           <!-- body begins here (ends in line 39) -->
    <div id="preamble" class="status">             <!-- preamble.html begins here (ends in line 20) -->
      <header class="header" itemscope itemtype="http://schema.org/WPHeader">
        Title
        <nav>
          <ul id="menu">
            <li><a href="/">Home</a></li>
            <li><a href="/research/">Research</a></li>
            <li><a href="/projects/">Personal Projects</a></li>
          </ul>
        </nav>
      </header>
    </div>                                         <!-- preamble.html ends here (begins in line 9) -->
    <div id="content" class="content">             <!-- contents begins here (ends in line 33) -->
      <h1 class="title">The title of the post</h1>
      <div id="table-of-contents" role="doc-toc">  <!-- TOC begins here (ends in line 31) -->
        <h2>Table of Contents</h2>
        <div id="text-table-of-contents" role="doc-toc">
          <ul>
            <li><a href="#第1节">第1节</a></li>
            <li><a href="#section-B">Section B</a></li>
          </ul>
        </div>
      </div>                                       <!-- TOC ends here (begins in line 23) -->
      <!-- main matter -->
    </div>                                         <!-- contents ends here (begins in line 21) -->
    <div id="postamble" class="status">            <!-- postamble.html begins here (ends in line 38) -->
      <footer>
        Powered by GNU Emacs 29.1 (Org mode 9.6.6)
      </footer>
    </div>                                         <!-- postamble.html ends here (begins in line 34) -->
  </body>                                          <!-- body ends here (ends in line 8) -->
#+end_src

You can find some samples of these three files, from the html in =./public/= generated by Hexo. Nevertheless, I still recommend you to refer the html that generated by Org mode (e.g. [[https://www.shellcodes.org/Emacs/使用Org-Mode生成博客.html][shellcodes]]'s) because most of the generated tags and classes are different.


** Build: Makefile & blog.el

Hexo uses =hexo g=, =hexo s=, =hexo d= to generate html, preview locally, and deploy to git. You can write your own =Makefile= by =make g=, =make s=, =make d=.

The equivalence of =hexo g= is =emacs --script blog.el=. The core contents of =blog.el= is the following, which would generate all Org files to html files at the same dir.
#+begin_src emacs-lisp
  (package-initialize)
  (require 'ox-html)
  (require 'ox-publish)

  (setq org-publish-project-alist
         '(("blog"
            :base-directory "."
            :publishing-directory "."
            :recursive t
            :publishing-function org-html-publish-to-html)))

  (setq org-html-head      (with-temp-buffer (insert-file-contents "static/head.html")      (buffer-string))
        org-html-preamble  (with-temp-buffer (insert-file-contents "static/preamble.html")  (buffer-string))
        org-html-postamble (with-temp-buffer (insert-file-contents "static/postamble.html") (buffer-string)))

  (add-to-list 'org-html-mathjax-options '(path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"))

  (org-publish-project "blog")
#+end_src

The equivalence of =hexo s= is =python -m http.server -d ./=, then preview the blow in your browser by =http://localhost:8000/=.

=hexo d=, "d" means "deploy". You can do this via =scp=, =rsync=, Emacs's =Tramp= etc.

The provided =blog.el= & =Makefile= are in the [[https://github.com/OChicken/Workspace][repo]]. =blog.el= is tailored to my dir tree and utilized some =elisp= techniques (thus it's not so simple at the first glance).


** CSS

As stated before, the CSS files I used to DIY are
1. The CSS generated by [[https://hexo.io/][Hexo]]'s [[https://theme-next.js.org/][NexT.Pisces]]. It's huge, more than 2000 lines.
2. [[https://orgmode.org/worg/][Worg]]'s official "[[https://orgmode.org/worg/style/worg.css][answer]]", approx 1000 lines, but the parts that only worth money are *lines 74 to 110, which involves the config of sidebar TOC*.

The sidebar TOC requires some js trick. Recall the layout, if you modify the generated html code, that *put the codes of TOC to the nav tag after menu's ul (unordered list), its position is exactly correct!*

So the task now turn to, how to shift the TOC part into the nav tag every time you generate the html files. ChatGPT taught me:
#+begin_src html
  <script>
    var toc = document.getElementById('table-of-contents');  /* get TOC */
    document.querySelector('nav').appendChild(toc);          /* Append the TOC to the nav */
    toc.querySelector("h2").innerHTML = "<i class=\"fa fa-list fa-fw\"></i> TOC";  /* change title */
  </script>
#+end_src
This is a js snippet, place it after the footer tags then every thing works. The third line is to change the TOC's name "Table of Contents" to three letters "TOC", which is exactly what you see in the top left.

There are still several facts should care:
1. In Org files, =*= represents h1, =**= represents h2, and so on. However in the generated html files, h1 tag wraps the title of the blog (e.g. "Emacs Workspace: IDE + Yet Another Jupyter" is actually h1), while h2 tags wraps the chapters begin with =*=.
2. CSS's ul (unordered list), ol (ordered list) etc are called =org-ul=, =org-ol= etc in the html generated by Org mode.

There is a personal preference worth mentioned. The main matter of my blog is not so wide as [[https://theme-next.js.org/][NexT.Pisces]] theme. One reason is that, the default width is 60em in the variable =org-html-style-default= (use =C-h v= to view it), another reason is, this width is similar to the typesetting of an A4 PDF paper, so that *reading my blog will give you almost the same experience as reading a PDF*.

Though [[https://theme-next.js.org/][NexT.Pisces]]'s CSS is huge (more than 2000 lines), but the core part I need is *exactly 300 lines*, and don't need any js.


* Mini IDE: Syntax Check, Complete, Compile
:PROPERTIES:
:CUSTOM_ID: mini-ide
:END:

The title is self-explained. *What you need are [[https://www.flycheck.org/en/latest/][Flycheck]] + [[https://company-mode.github.io/][Company]] + [[https://docs.projectile.mx/projectile/][Projectile]] + [[https://github.com/purcell/ibuffer-projectile][Ibuffer-Projectile]]. Such a mini-IDE don't need =eglot= or =lsp-mode=.*

cd to =mini-ide= to have a try. You can do =make= in terminal, or alternately in Emacs:
#+begin_example
M-x compile RET make
#+end_example

Note: though there is a project dir =ede/=, it is actually NOT a project built by Emacs's EDE, but purely the familiar GNU make, see this video. This name merely indicates that what EDE doing is nothing but the familiar GNU make process.

#+begin_export html
<iframe width=800 height=430
  src="demo/ede-make.mp4" frameborder="0">
</iframe>
#+end_export

** Flycheck & Include Path

[[https://www.flycheck.org/en/latest/][Flycheck]] is ready to go-out-of-the-box (开箱即用) after you set the follows. Use =C-c ! c= to rerun it and =C-c ! l= to list errors.
#+begin_src emacs-lisp
(dolist (hook '(prog-mode-hook text-mode-hook))
  (add-hook hook 'flycheck-mode))
#+end_src

The *global* search path is configured in =.emacs.d/='s file:
#+begin_src emacs-lisp
(setq flycheck-clang-include-path
      (list
       (expand-file-name "~/.local/include/")
       "/usr/share/verilator/include/"))
#+end_src
Paths like =/usr/include/= and =/usr/lib/gcc/.../include/= are automatically searched, so need not add.

The *local* search path is =.dir.locals.el= in your project dir. Its content is
#+begin_src emacs-lisp
((c-mode . ((flycheck-clang-include-path . ("/absolute/path/to/mini-ide/include"
                                            "/absolute/path/to/mini-ide/build")))))
#+end_src
After you set =.dir.locals.el=, do =C-x x g= to revert the opened =c= file.[fn:1]


Emacs's team also has Flymake. You'll dislike it after having a try. I assure you.


** Company

[[https://company-mode.github.io/][Company]] is ready to go-out-of-the-box after you set
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+end_src


** Projectile

[[https://docs.projectile.mx/projectile/][Projectile]] is ready to go-out-of-the-box after you set
#+begin_src emacs-lisp
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

[[https://github.com/purcell/ibuffer-projectile][Ibuffer-Projectile]] is used to group the buffers in the same project so that you can have a more nicer view in the buffer list. So you need an *"indicator file"* to mark that "this path is a project". [[https://docs.projectile.mx/projectile/][Projectile]] has a built-in solution: just create an empty file =.projectile= in it. You can add many other "indicator files" in the following way:
#+begin_src emacs-lisp
(dolist (file '(".dir-locals.el" ".ccls" "compile_flags.el"))
  (add-to-list 'projectile-project-root-files-bottom-up file t))
#+end_src


** About Emacs's EDE

*TLDR*: Emacs's built-in EDE is a white elephant (鸡肋). Write your own =Makefile= then =M-x compile RET make= is better.

=ede= is a sample project on how to write GNU make. cd to it and do:
#+begin_src shell
mkdir build m4
autoreconf -i; cd build; ../configure; make all
make-clean.sh
#+end_src

[[https://www.gnu.org/software/automake/manual/automake.html#Hello-World][automake: 2.4.1 Creating amhello-1.0.tar.gz]] 🚩
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/EDE.html][29.5 EDE (GNU Emacs Manual)]]
[[https://www.gnu.org/software/emacs/manual/html_node/ede/Quick-Start.html][3. Quick Start (EDE)]]
[[https://www.gnu.org/software/emacs/manual/html_node/ede/index.html][EDE manual - GNU Project - Free Software Foundation (FSF)]]

Emacs provides a built-in EDE to help you generate =configure.ac= & =Makefile.am=, the two essential files for a typical GNU-make project. However, few body says EDE is convenient to use:
[[https://www.reddit.com/r/emacs/comments/12ptn61/does_anyone_use_ede_emacs_development_environment/][Does anyone use "EDE" (Emacs Development Environment)? If so, what do you like/dislike about it and how does your config look for it? : emacs]]
#+begin_quote
I was a long time EDE user, but basically had to give it up.
1. It's no longer maintained, so the bugs that are in there are staying in there.
2. It is difficult to set up and configure, compared with e.g. Treemacs + lsp-mode.
So there it is. EDE, CEDET, all that has been supplanted by newer and better things like LSP.
#+end_quote

我自己使用 EDE 的体验是, 其文档 [[https://www.gnu.org/software/emacs/manual/html_node/ede/Quick-Start.html][Quick Start]] 实际上做的只是这三连命令. 但凡有过一点写 =configure.ac= 和 =Makefile.am= 的经验的人, 都不会认为把这种可以自行高度定制化的任务外包给一个年久失修的项目去生成, 是简化了工作的, 甚至是安全的.
My experience on using EDE is, what its [[https://www.gnu.org/software/emacs/manual/html_node/ede/Quick-Start.html][Quick Start]] talking about is nothing but the following commands. *Anybody has experience on writing =configure.ac= & =Makefile.am= will /NOT/ think that it's "simplified your life" (and even safe) to outsource such a highly customizable task to an outdated project.*
#+begin_src shell
autoreconf -f -i; ./configure; make -f Makefile all  # EDE's commands
autoreconf -i; cd build; ../configure; make all      # You can put the *.o to build/
#+end_src

[[file:demo/ede-make.png]]


** Identifier References (jump-to-&-back)

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][29.4 Xref (GNU Emacs Manual)]]

*Identifiers* are also known as */tags/*. An identifier is a name of a syntactical subunit of the program: a function, a subroutine, a method, a class, a data type, a macro, etc. In a programming language, *each identifier is a symbol* in the language's syntax. In a large programming project, it's vital to quickly find where an identifier is *declared, defined & referenced*. Emacs provides a unified interface to these capabilities --- =xref=.

This task requires mode-specific knowledge, to search for identifiers, find references to identifiers, complete on identifiers, etc. =xref= delegates the mode-specific parts of its job to a *backend* provided by the mode. A *backend* can implement its capabilities in a variety of ways:

1. =etags=-like commands to generate =TAGS= file, or =Semantic= to generate a database. Major modes for languages supported by =etags= can use *tags tables* as basis for their backend. So using =TAGS= file as a backend has a huge drawback: *you must update your =TAGS= timely*.
2. =Eglot= or =lsp-mode=. The *language server protocol*. *LSP does NOT introduce the concepts like "symbol table" or =TAGS= file*, but use message protocol as a support backend.

A work-around is, *for system headers*, you can simply generate a =TAGS= file for them, which does not need to open lsp; while *for the current project*, open lsp to perform real-time analysis. Here is a basic idea on how to generate =TAGS= for system headers:
- [[https://tuhdo.github.io/c-ide.html#orgheadline37][C/C++ Development Environment for Emacs]]

*** Find Identifiers (29.4.1)

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Identifiers.html][29.4.1 Find Identifiers (GNU Emacs Manual)]]
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Looking-Up-Identifiers.html][29.4.1.1 Looking Up Identifiers (GNU Emacs Manual)]]
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref-Commands.html][29.4.1.2 Xref Commands (GNU Emacs Manual)]]

Use these commands to jump among the function definitions:

#+begin_src shell
M-.                            # xref-find-definitions
M-,                            # xref-go-back
M-?                            # xref-find-references
#+end_src


*** Tags Tables (29.4.2)

*TLDR*: Use =ctags= to generate =TAGS= file, do not use Emacs's built-in =etags=.

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Tags-Tables.html][29.4.2 Tags Tables (GNU Emacs Manual)]]
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Create-Tags-Table.html][29.4.2.2 Create Tags Table (GNU Emacs Manual)]]
[[https://stackoverflow.com/questions/10738219/how-to-use-shell-magic-to-create-a-recursive-etags-using-gnu-etags][c++ - How to use shell magic to create a recursive etags using GNU etags? - Stack Overflow]]

Emacs's built-in Tag generator is =etags=:
#+begin_src shell
find . -name "*.[chCH]" -print | etags -
find . -type f -regex "./\(foo\|bar\)/.*" | etags -
find . -type f -regex "./\(foo\|bar\)/.*" | xargs etags
etags $(find . -type f -regex "./\(foo\|bar\)/.*")
#+end_src
This will generate a =TAGS= file in the project dir. The first time doing =M-.=, Emacs will ask you which =TAGS= file to use, then input the path. Use =C-h v= to view the var =tags-table-list=.

=ctags= is more versatile than =etags=. Basic Use:
#+begin_src shell
ctags -e --kinds-C=+p    -R . --exclude=foo
ctags -e --kinds-C=+px-d -R . --exclude=foo
#+end_src
where =-e= indicates that the output format should compatible with Emacs; =--kinds-C=+p= is the vital options that resolved the problem, to *generate tags for function prototypes and external variable declarations*; =--kinds-C=+px-d= means *excludes macros* (sometimes macros are annoying).

First create =~/.emacs.d/ctags/= and cd to it. To create the =TAGS= for the frequently used system headers:
#+begin_src shell
ctags -e -a --kinds-c=+px-d /usr/include/*.h --exclude=gcrypt.h --exclude=gpg-error.h
ctags -e -a --kinds-c=+p    /usr/include/gcrypt.h /usr/include/gpg-error.h
ctags -e -a --kinds-c=+px-d /usr/lib/gcc/x86_64-pc-linux-gnu/$(gcc --version | awk 'NR==1{print $3}')/include/*.h
#+end_src
where =-a= means *append* to =TAGS= if it exists. These are commands to generated the interested system headers:
#+begin_src shell
ctags -e --kinds-c=+px-d -f TAGS-verilator    /usr/share/verilator/include/*.h
ctags -e --kinds-c=+px-d -f TAGS-linux     -R /usr/src/linux/
#+end_src

=etags= does not have so much options like =ctags=, so that it cannot even generate the references like identifier =printf=, the *function prototype* of =stdio.h=, which is its *huge drawback*; but =ctags= can.

Here are the links that hint me (search "ctags not generate =printf="):
- 2010.05.21 [[https://stackoverflow.com/questions/1632633/ctags-does-not-parse-stdio-h-properly][c++ - ctags does not parse stdio.h properly - Stack Overflow]]
- 2017.02.09 [[https://stackoverflow.com/questions/10989141/how-can-jump-to-a-c-functions-declaration-with-etags][emacs - How can jump to a C++ function's declaration with etags? - Stack Overflow]]
- 2020.01.07 [[https://stackoverflow.com/questions/59625163/why-tags-file-increasing-large-and-how-to-avoid-this-issue][vim - Why tags file increasing large and how to avoid this issue - Stack Overflow]]
- 2020 [[https://www.reddit.com/r/C_Programming/comments/ms80ah/how_to_handle_variable_scope_in_ctags_in_c/][How to handle variable scope in ctags in C? : C_Programming]]
- [[https://www.emacswiki.org/emacs/EtagsTable][EmacsWiki: Etags Table]]


*** Selecting a Tags Table (29.4.3)

You may add TAGS via
#+begin_src shell
M-x visit-tags-table           # You can add TAGS to tags-table-list in this way
#+end_src
or alternately set =tags-table-list= in =.emacs.d/init.el=:
#+begin_src emacs-lisp
(setq tags-table-list '("~/.emacs.d/ctags/TAGS"))
#+end_src
I didn't add =TAGS-verilator= and =TAGS-linux=, simply because they are barely used (and =TAGS-linux= is huge). Indeed, you can add them when you need.


*** Semantic

Semantic is an alternate framework to generate tags: in its context, the =TAGS= files is a *database* in =.emacs.d/semanticdb/=.

Use =semantic-ia-fast-mouse-jump= to jump to the definition: [[https://www.gnu.org/software/emacs/manual/html_node/semantic/Smart-Jump.html][2.4.3 Smart Jump (Semantic Manual)]]. But its problem is, it cannot jump back 😂 so you need properly set: [[https://www.cnblogs.com/xiaoshiwang/p/11912533.html][emacs semantic，speedbar，gdb汇总 - 小石王 - 博客园]]

I am not the Semantic user, but still put the settings I have tried (it works, of course):
#+begin_src emacs-lisp
(require 'semantic)
; Semantic buffer evaluator
; file:///usr/share/emacs/29.1/lisp/cedet/semantic.el.gz
(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(global-semantic-idle-summary-mode 1)
(semantic-mode 1)
(semantic-add-system-include "/usr/include/")
(semantic-add-system-include "/usr/share/verilator/include/")
(semantic-add-system-include "/usr/src/linux/")
(define-key semantic-mode (kbd "M-.") 'semantic-ia-fast-jump)
#+end_src


** LSP Tools: Eglot & lsp-mode

As the title explains, LSP tools are encompassed, Eglot & =lsp-mode= are two of them. Readers should familiar that /they are two competitors/. *I use Eglot*.

*** Background

读者应该也清楚, LSP 的 backends 主要是 clangd. 其实除它以外还有 *ccls* 等, *但是, gcc 通常不作为 LSP 的 backend*.
Readers should familiar with the fact that *clangd* is the backend of LSP, but besides clangd, there are other options such as *ccls* etc. *However, gcc is not served as the backend of LSP*.

gcc 诞生的时间比较早, 最初设计时集成了编译的所有阶段, 包括 *词法分析, 语法分析, 语义分析和代码生成* 四个任务, *紧密耦合* (这大概也解释了 "cc" 的含义: compiler collection). 后来随着编译器和编辑器技术的发展, 人们意识到, 在编辑的时候要做的词法分析其实并不需要生成机器代码, 解耦前后端好处多多, 遂引入了 *中间表象* 这个概念作为一个通用的接口, 使得可以在不生成最终机器代码的情况下完成前三项任务, 这为编辑器以及其他工具链提供了更灵活的接口. 现代编译器的代表性项目就是 clangd 和 ccls, 其优势主要在于 *前端编辑的时候做实时语法检查,* gcc 就并不胜任这一点.
gcc was born relatively early, initially designed to integrate all stages of compilation, including *lexical analysis, syntax analysis, semantic analysis and code generation.* Four tasks are tightly coupled (this probably also explains the meaning of "cc": compiler collection). Later, as compiler and editor technologies evolved, people realize that the lexical/syntax/semantic analysis during editing *does not require machine code generation*, and that decoupling the frontend and backend has much benefit. So the concept of *intermediate representations* was introduced as a common interface that allowed the first three tasks to be accomplished without generating the final machine code, which provided a more flexible interface to editors and other tool-chains. Modern compilers, such as clangd and ccls, have the advantage of doing real-time syntax checking during front-end editing, which gcc is not capable of doing.

可以采用 "Eglot + ccls" 或 "Eglot + clangd", 我都会在这里介绍. 我不是 =lsp-mode= 用户, 但也不是 =Eglot= 的忠实用户: 实际上 Mini-IDE 一章所涉及的工具已经陪伴我走过了很长一段路.
You can choose either "Eglot + ccls" or "Eglot + clangd". I will talk about them here. I am not the =lsp-mode= user, but also not the faithful user of =Eglot=: actually, the tools involved in Mini-IDE have been with me for a long time.

Eglot:
- [[https://github.com/joaotavora/eglot][GitHub - joaotavora/eglot: A client for Language Server Protocol servers]]
- [[https://joaotavora.github.io/eglot/][Eglot: The Emacs Client for the Language Server Protocol]]
- [[https://whatacold.io/zh-cn/blog/2018-12-22-c-cpp-devel-with-lsp-in-emacs/][在 Emacs 中使用 LSP 开发 C/C++ 工程 - whatacold 的空间]] (用的是 Eglot, 标题的 LSP 有点误导)

lsp-mode:
- [[https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/][Configuring Emacs as a C/C++ IDE - LSP Mode - LSP support for Emacs]]
- [[https://emacs-lsp.github.io/lsp-mode/page/lsp-ccls/][C++ (ccls) - LSP Mode - LSP support for Emacs]]
- [[https://github.com/joaotavora/eglot/discussions/988][Breadcrumb feature (can eglot support headerline like lsp-mode does?) · joaotavora/eglot · Discussion #988 · GitHub]] (=lsp-mode= has a headline menu, a fancy feature)
- [[https://zhuanlan.zhihu.com/p/467681146][专业 Emacs 入门（七）：插件篇——编程开发类 - 知乎]]: 代码分析
- [[https://emacs-china.org/t/emacs-lsp-ccls/9952][怎样在emacs中完整的使用lsp + ccls - Emacs-general - Emacs China]]


*** Eglot Basic Use

After setting =compile_commands.json= (for clangd) and/or =.ccls= (for ccls) in the project root, =M-x eglot= to open. The candidates of =eglot-xxx= are not so much, altogether 31. Three of them are what you want:
- =eglot-find-declaration=
- =eglot-find-implementation=
- =eglot-find-typeDefinition=

In the variable =eglot-server-programs=, there are two candidates: clangd & ccls. Set the following to use clangd by default:
#+begin_src emacs-lisp
(add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
#+end_src


*** Eglot + clangd

The contents of the project dir =eglot-clangd= is exactly the same as =mini-ide=: *a series of =Makefile= are prepared*. As they are prepared, do this command in the project root
#+begin_src shell
bear -- make
#+end_src
which will generate the important =compile_commands.json=. Its content is
#+begin_src json
[
  {
    "arguments": [
      "/usr/bin/cc",
      "-I../include",
      "-I../build",
      //...
      "mylib.c"
    ],
    "directory": "/absolute/path/to/eglot-clangd/",
    "file": "/absolute/path/to/eglot-clangd/src/mylib.c",
    "output": "/absolute/path/to/eglot-clangd/build/libmylib.so"
  }
]
#+end_src

The [[https://clangd.llvm.org/installation.html][official site of clangd]] itself has guidance on using Eglot with clangd backends (the basic usage of Eglot is not in Eglot's official site, but in clangd's, surprise?)


*** Eglot + ccls (buggy)

Put =.ccls= to the projects folders. Its content is the following:

#+begin_src
clang
-I./include
-I./build
#+end_src

Refs:
- [[https://github.com/MaskRay/ccls/wiki/eglot][eglot · MaskRay/ccls Wiki · GitHub]]
- [[https://github.com/MaskRay/ccls/wiki/Project-Setup#ccls-file][Project Setup · MaskRay/ccls Wiki · GitHub]]: ccls-file
- [[https://github.com/MaskRay/ccls/wiki/Project-Setup#ccls-examples][Project Setup · MaskRay/ccls Wiki · GitHub]]: ccls-example
- [[https://github.com/joaotavora/eglot/issues/663][joaotavora/eglot#663 eglot with ccls: M-. can only find and jump to func definitions if they are in buffers]]


* Vielen Dank
:PROPERTIES:
:CUSTOM_ID: vielen-dank
:END:

[[file:Danke.gif]]

Buy me a Cola (1.3EUR) or an [[https://www.google.com/maps/place/Eiscaf%C3%A9+San+Remo/@50.7799241,6.0801078,20.36z/data=!4m6!3m5!1s0x47c099645487ff85:0x1b1ceee6d970dc7e!8m2!3d50.7799268!4d6.0804921!16s][ice cream]] (1.5EUR) or a cup of [[https://www.heytea.com/][喜茶]] (30CNY) or a meal of [[https://www.google.com/maps/place/China-Imbiss+Xinlong/@50.7808239,6.0782324,19.45z/data=!3m1!5s0x47c09979de297d6f:0x1ba9082f532d105!4m6!3m5!1s0x47c09979e0879747:0x468773be7804ba35!8m2!3d50.7810414!4d6.0781773!16s%2Fg%2F11b7k15wb0?entry=ttu][鑫隆]] (5.9EUR) 😋

PayPal: shouran.ma@gmail.com; [[file:WeChatPay.png][WeChat Pay]]


* Footnotes

[fn:1] Setting =.dir.locals.el= in this way covers the global settings, so that if you =#include <header.h>= where =header.h= located in =~/.local/include=, Flycheck would warn header not found. However, if you alternately use =setq= or =add-to-list= to append the local settings to the global, there would gives an "unsafe warn", if you type 'y' or '!', the local paths are merged with the global (the distinguish between local and global vanishes), and register in =safe-local-variable=. This tricky fact is due to the *"trust safe local var" nature in elisp*. I have an unsatisfactory workaround up to my current knowledge, but want to keep it secret.
